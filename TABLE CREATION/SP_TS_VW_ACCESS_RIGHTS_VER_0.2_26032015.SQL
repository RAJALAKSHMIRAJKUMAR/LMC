DROP PROCEDURE IF EXISTS SP_TS_VW_ACCESS_RIGHTS;
CREATE PROCEDURE SP_TS_VW_ACCESS_RIGHTS(
OUT SUCCESS_MESSAGE TEXT)
BEGIN

	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		SET SUCCESS_MESSAGE=0;
	END;

	SET AUTOCOMMIT=0;
	START TRANSACTION;	
	SET SUCCESS_MESSAGE=0;

	CREATE OR REPLACE VIEW VW_TS_ALL_ACTIVE_EMPLOYEE_DETAILS AS  SELECT ULD.ULD_ID,ULD.ULD_USERNAME,URC.URC_ID,
	URC.URC_DATA FROM LMC_USER_LOGIN_DETAILS ULD,LMC_USER_RIGHTS_CONFIGURATION URC,LMC_ROLE_CREATION RC
	WHERE ULD.RC_ID=RC.RC_ID AND RC.URC_ID=URC.URC_ID AND ULD.ULD_TERMINATE_FLAG IS NULL;

	CREATE OR REPLACE VIEW VW_TS_ALL_NON_ACTIVE_EMPLOYEE_DETAILS AS  SELECT ULD.ULD_ID,ULD.ULD_USERNAME,URC.URC_ID,
	URC.URC_DATA FROM LMC_USER_LOGIN_DETAILS ULD,LMC_USER_RIGHTS_CONFIGURATION URC,LMC_ROLE_CREATION RC
	WHERE ULD.RC_ID=RC.RC_ID AND RC.URC_ID=URC.URC_ID AND ULD.ULD_TERMINATE_FLAG IS NOT NULL;

	SET SUCCESS_MESSAGE=1;

	COMMIT;

END;

CALL SP_TS_VW_ACCESS_RIGHTS(@SUCCESS_MESSAGE);
SELECT @SUCCESS_MESSAGE;

DROP PROCEDURE IF EXISTS SP_TS_VW_ACCESS_RIGHTS;